// <auto-generated />
using System;
using LanguageCourses.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LanguageCourses.API.Migrations
{
    [DbContext(typeof(LanguageCoursesDbContext))]
    [Migration("20240218022031_First migration")]
    partial class Firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LanguageCourses.API.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            Available = true,
                            Description = "Description for Course 1",
                            Duration = 9,
                            Language = "Engleski",
                            Level = "B1",
                            Name = "Course 1",
                            Price = 25.87m,
                            ProfessorId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8"),
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            Available = true,
                            Description = "Description for Course 2",
                            Duration = 3,
                            Language = "Engleski",
                            Level = "C1",
                            Name = "Course 2",
                            Price = 21m,
                            ProfessorId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8"),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            Available = true,
                            Description = "Description for Course 3",
                            Duration = 20,
                            Language = "Engleski",
                            Level = "B2",
                            Name = "Course 3",
                            Price = 14.5m,
                            ProfessorId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed"),
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            Available = true,
                            Description = "Description for Course 4",
                            Duration = 40,
                            Language = "Engleski",
                            Level = "C2",
                            Name = "Course 4",
                            Price = 10.87m,
                            ProfessorId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed"),
                            Type = 1
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.CourseUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4b12efb-c878-4a43-9197-1efdf1d33e4a"),
                            Content = "Content 1",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            PostDate = new DateTime(2024, 2, 18, 3, 20, 31, 69, DateTimeKind.Local).AddTicks(2243),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("4abf8e23-8fbd-46a6-80dc-fedd31814e24"),
                            Content = "Content 2",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            PostDate = new DateTime(2024, 2, 18, 3, 20, 31, 69, DateTimeKind.Local).AddTicks(2500),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("5e6fdd45-3ba6-4019-af72-665d2e1a39aa"),
                            Content = "Content 3",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            PostDate = new DateTime(2024, 2, 18, 3, 20, 31, 69, DateTimeKind.Local).AddTicks(2507),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("87c1eb43-6bc9-4f0d-ab08-bf54a708c88c"),
                            Content = "Content 4",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            PostDate = new DateTime(2024, 2, 18, 3, 20, 31, 69, DateTimeKind.Local).AddTicks(2514),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("5f632e40-9f96-4c75-9afa-59dc6460d8e0"),
                            Content = "Content 5",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            PostDate = new DateTime(2024, 2, 18, 3, 20, 31, 69, DateTimeKind.Local).AddTicks(2518),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("d2d5b555-e8af-478b-a144-0ea40f7d4ed6"),
                            Content = "Content 6",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            PostDate = new DateTime(2024, 2, 18, 3, 20, 31, 69, DateTimeKind.Local).AddTicks(2522),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("4bc9fece-54dc-4cca-a31b-de8a0557f8da"),
                            Content = "Content 7",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            PostDate = new DateTime(2024, 2, 18, 3, 20, 31, 69, DateTimeKind.Local).AddTicks(2526),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("e8a67c2e-3943-44ed-9d6c-7a56565302e9"),
                            Content = "Content 8",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            PostDate = new DateTime(2024, 2, 18, 3, 20, 31, 69, DateTimeKind.Local).AddTicks(2530),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9150584f-eb77-4a84-a13f-698a581985d8"),
                            Email = "fjovanovic284@gmail.com",
                            FirstName = "Filip",
                            LastName = "Jovanović",
                            PasswordHash = new byte[] { 83, 178, 88, 103, 205, 186, 20, 234, 217, 199, 212, 91, 83, 65, 187, 201, 141, 95, 199, 177, 113, 215, 40, 78, 133, 25, 152, 139, 33, 230, 126, 238, 180, 49, 170, 214, 142, 166, 1, 4, 236, 245, 203, 39, 197, 127, 20, 244, 163, 196, 54, 243, 166, 206, 239, 231, 152, 193, 9, 128, 134, 211, 233, 120 },
                            PasswordSalt = new byte[] { 194, 113, 68, 5, 23, 199, 132, 37, 26, 134, 244, 235, 12, 244, 74, 15, 187, 81, 229, 233, 45, 184, 188, 210, 228, 80, 204, 10, 240, 218, 255, 45, 2, 169, 23, 109, 216, 114, 169, 0, 137, 253, 239, 182, 59, 8, 103, 43, 17, 142, 179, 156, 156, 190, 34, 186, 127, 168, 108, 30, 70, 154, 174, 67, 200, 164, 111, 204, 68, 31, 218, 187, 230, 244, 199, 147, 196, 227, 21, 122, 238, 116, 98, 62, 187, 170, 152, 250, 63, 255, 91, 101, 185, 112, 186, 64, 152, 232, 160, 177, 140, 21, 154, 121, 147, 55, 111, 189, 111, 112, 127, 94, 64, 160, 63, 251, 98, 58, 132, 253, 6, 188, 0, 14, 188, 13, 120, 91 },
                            Phone = "061 755 8995",
                            Picture = "9150584F-EB77-4A84-A13F-698A581985D8.jpg",
                            Role = 2,
                            VerificationToken = "C4646E95A5E0E9611C797722B399316298B179042481A4D78728F9D2FED75CC17109EE0CE8DDEDD9A4EADB897D23416B8DD1A35A9B346CDEBD705D512566BEDA",
                            VerifiedAt = new DateTime(2024, 2, 18, 3, 20, 31, 67, DateTimeKind.Local).AddTicks(8557)
                        },
                        new
                        {
                            Id = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed"),
                            Email = "lule19@gmail.com",
                            FirstName = "Luka",
                            LastName = "Petrović",
                            PasswordHash = new byte[] { 83, 178, 88, 103, 205, 186, 20, 234, 217, 199, 212, 91, 83, 65, 187, 201, 141, 95, 199, 177, 113, 215, 40, 78, 133, 25, 152, 139, 33, 230, 126, 238, 180, 49, 170, 214, 142, 166, 1, 4, 236, 245, 203, 39, 197, 127, 20, 244, 163, 196, 54, 243, 166, 206, 239, 231, 152, 193, 9, 128, 134, 211, 233, 120 },
                            PasswordSalt = new byte[] { 194, 113, 68, 5, 23, 199, 132, 37, 26, 134, 244, 235, 12, 244, 74, 15, 187, 81, 229, 233, 45, 184, 188, 210, 228, 80, 204, 10, 240, 218, 255, 45, 2, 169, 23, 109, 216, 114, 169, 0, 137, 253, 239, 182, 59, 8, 103, 43, 17, 142, 179, 156, 156, 190, 34, 186, 127, 168, 108, 30, 70, 154, 174, 67, 200, 164, 111, 204, 68, 31, 218, 187, 230, 244, 199, 147, 196, 227, 21, 122, 238, 116, 98, 62, 187, 170, 152, 250, 63, 255, 91, 101, 185, 112, 186, 64, 152, 232, 160, 177, 140, 21, 154, 121, 147, 55, 111, 189, 111, 112, 127, 94, 64, 160, 63, 251, 98, 58, 132, 253, 6, 188, 0, 14, 188, 13, 120, 91 },
                            Phone = "064 765 9876",
                            Picture = "viber_image_2024-02-04_17-38-12-871.jpg",
                            Role = 2,
                            VerificationToken = "5A520523656A7490328D52BFC97FDA0D0D872A40FB9A4CC5E24E935D80B6BD1E1D3A54054A4CB9EB5AB40C3E159A010A0C9BB0AB13E73BAB53E8FCE17CA3FB8D",
                            VerifiedAt = new DateTime(2024, 2, 18, 3, 20, 31, 67, DateTimeKind.Local).AddTicks(8647)
                        },
                        new
                        {
                            Id = new Guid("73fb19cd-7b56-459e-8b84-be0d05dd67b6"),
                            Email = "boka0404002.ba@gmail.com",
                            FirstName = "Bojana",
                            LastName = "Aleksijević",
                            PasswordHash = new byte[] { 83, 178, 88, 103, 205, 186, 20, 234, 217, 199, 212, 91, 83, 65, 187, 201, 141, 95, 199, 177, 113, 215, 40, 78, 133, 25, 152, 139, 33, 230, 126, 238, 180, 49, 170, 214, 142, 166, 1, 4, 236, 245, 203, 39, 197, 127, 20, 244, 163, 196, 54, 243, 166, 206, 239, 231, 152, 193, 9, 128, 134, 211, 233, 120 },
                            PasswordSalt = new byte[] { 194, 113, 68, 5, 23, 199, 132, 37, 26, 134, 244, 235, 12, 244, 74, 15, 187, 81, 229, 233, 45, 184, 188, 210, 228, 80, 204, 10, 240, 218, 255, 45, 2, 169, 23, 109, 216, 114, 169, 0, 137, 253, 239, 182, 59, 8, 103, 43, 17, 142, 179, 156, 156, 190, 34, 186, 127, 168, 108, 30, 70, 154, 174, 67, 200, 164, 111, 204, 68, 31, 218, 187, 230, 244, 199, 147, 196, 227, 21, 122, 238, 116, 98, 62, 187, 170, 152, 250, 63, 255, 91, 101, 185, 112, 186, 64, 152, 232, 160, 177, 140, 21, 154, 121, 147, 55, 111, 189, 111, 112, 127, 94, 64, 160, 63, 251, 98, 58, 132, 253, 6, 188, 0, 14, 188, 13, 120, 91 },
                            Phone = "064 784 5668",
                            Role = 2,
                            VerificationToken = "F9A4646CB28DBDCBB089A86B9A7B94648A07CB65C931372D280D9580CA7C24B213061FF00FEE85CB7B0A18F1A0CCB91695F7A1B727BBC6A6B805F90F01F719B5",
                            VerifiedAt = new DateTime(2024, 2, 18, 3, 20, 31, 67, DateTimeKind.Local).AddTicks(8737)
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.CourseUser", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany("CourseUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCourses.API.Models.User", "User")
                        .WithMany("CourseUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Review", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCourses.API.Models.Course", null)
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId1");

                    b.HasOne("LanguageCourses.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Course", b =>
                {
                    b.Navigation("CourseUsers");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.User", b =>
                {
                    b.Navigation("CourseUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
