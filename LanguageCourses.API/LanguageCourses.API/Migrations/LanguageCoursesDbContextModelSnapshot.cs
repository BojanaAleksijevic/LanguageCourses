// <auto-generated />
using System;
using LanguageCourses.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LanguageCourses.API.Migrations
{
    [DbContext(typeof(LanguageCoursesDbContext))]
    partial class LanguageCoursesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LanguageCourses.API.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            Available = true,
                            Description = "Description for Course 1",
                            Language = "Engleski",
                            Level = "B1",
                            Name = "Course 1",
                            ProfessorId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            Available = true,
                            Description = "Description for Course 2",
                            Language = "Engleski",
                            Level = "C1",
                            Name = "Course 2",
                            ProfessorId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            Available = true,
                            Description = "Description for Course 3",
                            Language = "Engleski",
                            Level = "B2",
                            Name = "Course 3",
                            ProfessorId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            Available = true,
                            Description = "Description for Course 4",
                            Language = "Engleski",
                            Level = "C2",
                            Name = "Course 4",
                            ProfessorId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.CourseUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("961fa56e-71a8-4186-8a8d-488143d6a260"),
                            Content = "Content 1",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            Title = "Title 1"
                        },
                        new
                        {
                            Id = new Guid("e0c98ea1-2644-4ff0-8f2e-e7d30a3f2a6b"),
                            Content = "Content 2",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            Title = "Title 2"
                        },
                        new
                        {
                            Id = new Guid("b2d89a70-2ac5-4d26-94b9-ef99b746a388"),
                            Content = "Content 3",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            Title = "Title 3"
                        },
                        new
                        {
                            Id = new Guid("ed0632a3-1b00-421c-be7f-044253c2d820"),
                            Content = "Content 4",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            Title = "Title 4"
                        },
                        new
                        {
                            Id = new Guid("e19c5e3e-c5aa-411d-b540-0597307daf79"),
                            Content = "Content 5",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            Title = "Title 5"
                        },
                        new
                        {
                            Id = new Guid("1695a6e9-f4a8-45f2-8cc9-5ff0c01dad26"),
                            Content = "Content 6",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            Title = "Title 6"
                        },
                        new
                        {
                            Id = new Guid("75f0edab-103a-46ac-aff0-1f17aca2d279"),
                            Content = "Content 7",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            Title = "Title 7"
                        },
                        new
                        {
                            Id = new Guid("c1c2c043-1385-47d0-9ec8-c8a6085bf0bc"),
                            Content = "Content 8",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            Title = "Title 8"
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4b12efb-c878-4a43-9197-1efdf1d33e4a"),
                            Content = "Content 1",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            PostDate = new DateTime(2024, 1, 23, 20, 40, 19, 141, DateTimeKind.Local).AddTicks(504),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("4abf8e23-8fbd-46a6-80dc-fedd31814e24"),
                            Content = "Content 2",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            PostDate = new DateTime(2024, 1, 23, 20, 40, 19, 141, DateTimeKind.Local).AddTicks(526),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("5e6fdd45-3ba6-4019-af72-665d2e1a39aa"),
                            Content = "Content 3",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            PostDate = new DateTime(2024, 1, 23, 20, 40, 19, 141, DateTimeKind.Local).AddTicks(530),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("87c1eb43-6bc9-4f0d-ab08-bf54a708c88c"),
                            Content = "Content 4",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            PostDate = new DateTime(2024, 1, 23, 20, 40, 19, 141, DateTimeKind.Local).AddTicks(534),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("5f632e40-9f96-4c75-9afa-59dc6460d8e0"),
                            Content = "Content 5",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            PostDate = new DateTime(2024, 1, 23, 20, 40, 19, 141, DateTimeKind.Local).AddTicks(538),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("d2d5b555-e8af-478b-a144-0ea40f7d4ed6"),
                            Content = "Content 6",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            PostDate = new DateTime(2024, 1, 23, 20, 40, 19, 141, DateTimeKind.Local).AddTicks(543),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("4bc9fece-54dc-4cca-a31b-de8a0557f8da"),
                            Content = "Content 7",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            PostDate = new DateTime(2024, 1, 23, 20, 40, 19, 141, DateTimeKind.Local).AddTicks(546),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("e8a67c2e-3943-44ed-9d6c-7a56565302e9"),
                            Content = "Content 8",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            PostDate = new DateTime(2024, 1, 23, 20, 40, 19, 141, DateTimeKind.Local).AddTicks(550),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9150584f-eb77-4a84-a13f-698a581985d8"),
                            Email = "fjovanovic284@gmail.com",
                            FirstName = "Filip",
                            LastName = "Jovanović",
                            PasswordHash = new byte[] { 74, 155, 235, 179, 70, 251, 71, 176, 58, 55, 142, 204, 6, 122, 36, 195, 167, 6, 20, 155, 141, 215, 79, 44, 182, 171, 179, 234, 15, 161, 109, 244, 117, 75, 76, 19, 43, 56, 204, 197, 226, 11, 189, 206, 97, 43, 221, 151, 221, 157, 154, 158, 90, 211, 238, 177, 52, 31, 27, 207, 140, 186, 73, 98 },
                            PasswordSalt = new byte[] { 126, 74, 106, 48, 73, 212, 64, 153, 245, 226, 74, 254, 107, 33, 174, 29, 166, 105, 61, 243, 126, 37, 118, 193, 112, 80, 224, 231, 124, 232, 47, 91, 122, 242, 8, 160, 100, 240, 174, 59, 168, 141, 212, 67, 238, 149, 244, 44, 202, 51, 234, 233, 210, 181, 161, 159, 237, 5, 84, 114, 238, 194, 187, 28, 145, 96, 206, 174, 197, 175, 214, 7, 206, 40, 119, 52, 42, 49, 83, 126, 183, 99, 113, 154, 171, 19, 52, 44, 11, 90, 25, 173, 210, 188, 58, 168, 154, 35, 115, 169, 166, 206, 37, 188, 126, 174, 215, 158, 226, 41, 63, 222, 189, 197, 101, 8, 72, 233, 86, 202, 213, 159, 131, 99, 137, 32, 110, 4 },
                            Phone = "061 755 8995",
                            Role = 2,
                            VerificationToken = "8D2AA1E004958D5958785C2D9CDB9514AE273326C5A1D79500A348E848DCF2CCEF8BB34E5A723B8A2323B37ED6593F92717F9C20973B04EE8C3408C37A971594",
                            VerifiedAt = new DateTime(2024, 1, 23, 20, 40, 19, 140, DateTimeKind.Local).AddTicks(41)
                        },
                        new
                        {
                            Id = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed"),
                            Email = "lule19@gmail.com",
                            FirstName = "Luka",
                            LastName = "Petrović",
                            PasswordHash = new byte[] { 74, 155, 235, 179, 70, 251, 71, 176, 58, 55, 142, 204, 6, 122, 36, 195, 167, 6, 20, 155, 141, 215, 79, 44, 182, 171, 179, 234, 15, 161, 109, 244, 117, 75, 76, 19, 43, 56, 204, 197, 226, 11, 189, 206, 97, 43, 221, 151, 221, 157, 154, 158, 90, 211, 238, 177, 52, 31, 27, 207, 140, 186, 73, 98 },
                            PasswordSalt = new byte[] { 126, 74, 106, 48, 73, 212, 64, 153, 245, 226, 74, 254, 107, 33, 174, 29, 166, 105, 61, 243, 126, 37, 118, 193, 112, 80, 224, 231, 124, 232, 47, 91, 122, 242, 8, 160, 100, 240, 174, 59, 168, 141, 212, 67, 238, 149, 244, 44, 202, 51, 234, 233, 210, 181, 161, 159, 237, 5, 84, 114, 238, 194, 187, 28, 145, 96, 206, 174, 197, 175, 214, 7, 206, 40, 119, 52, 42, 49, 83, 126, 183, 99, 113, 154, 171, 19, 52, 44, 11, 90, 25, 173, 210, 188, 58, 168, 154, 35, 115, 169, 166, 206, 37, 188, 126, 174, 215, 158, 226, 41, 63, 222, 189, 197, 101, 8, 72, 233, 86, 202, 213, 159, 131, 99, 137, 32, 110, 4 },
                            Phone = "064 765 9876",
                            Role = 2,
                            VerificationToken = "E99884F381EFF52E1365B3EB429BD9C1CCA1FFCF4A50D118F161BA8188CE4D6D52C3E83EA6D222E838DC95ADBD4AE9294E55669B5DE7A2369E50C72DF1312129",
                            VerifiedAt = new DateTime(2024, 1, 23, 20, 40, 19, 140, DateTimeKind.Local).AddTicks(129)
                        },
                        new
                        {
                            Id = new Guid("73fb19cd-7b56-459e-8b84-be0d05dd67b6"),
                            Email = "boka0404002.ba@gmail.com",
                            FirstName = "Bojana",
                            LastName = "Aleksijević",
                            PasswordHash = new byte[] { 74, 155, 235, 179, 70, 251, 71, 176, 58, 55, 142, 204, 6, 122, 36, 195, 167, 6, 20, 155, 141, 215, 79, 44, 182, 171, 179, 234, 15, 161, 109, 244, 117, 75, 76, 19, 43, 56, 204, 197, 226, 11, 189, 206, 97, 43, 221, 151, 221, 157, 154, 158, 90, 211, 238, 177, 52, 31, 27, 207, 140, 186, 73, 98 },
                            PasswordSalt = new byte[] { 126, 74, 106, 48, 73, 212, 64, 153, 245, 226, 74, 254, 107, 33, 174, 29, 166, 105, 61, 243, 126, 37, 118, 193, 112, 80, 224, 231, 124, 232, 47, 91, 122, 242, 8, 160, 100, 240, 174, 59, 168, 141, 212, 67, 238, 149, 244, 44, 202, 51, 234, 233, 210, 181, 161, 159, 237, 5, 84, 114, 238, 194, 187, 28, 145, 96, 206, 174, 197, 175, 214, 7, 206, 40, 119, 52, 42, 49, 83, 126, 183, 99, 113, 154, 171, 19, 52, 44, 11, 90, 25, 173, 210, 188, 58, 168, 154, 35, 115, 169, 166, 206, 37, 188, 126, 174, 215, 158, 226, 41, 63, 222, 189, 197, 101, 8, 72, 233, 86, 202, 213, 159, 131, 99, 137, 32, 110, 4 },
                            Phone = "064 784 5668",
                            Role = 2,
                            VerificationToken = "FCB1B88171F72C787685291F59C3306D9E50974718FBCBBBEBEFA7919EBEF9A7267DA909C2DFD1350CC4959D1E689943E0E14F3EF43E09C01A44DBC0B6D05E52",
                            VerifiedAt = new DateTime(2024, 1, 23, 20, 40, 19, 140, DateTimeKind.Local).AddTicks(161)
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.CourseUser", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany("CourseUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCourses.API.Models.User", "User")
                        .WithMany("CourseUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Lesson", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Review", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCourses.API.Models.Course", null)
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId1");

                    b.HasOne("LanguageCourses.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Course", b =>
                {
                    b.Navigation("CourseUsers");

                    b.Navigation("Lessons");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.User", b =>
                {
                    b.Navigation("CourseUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
