// <auto-generated />
using System;
using LanguageCourses.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LanguageCourses.API.Migrations
{
    [DbContext(typeof(LanguageCoursesDbContext))]
    [Migration("20231210011127_First migration")]
    partial class Firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LanguageCourses.API.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Forum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfeb0e5e-5d09-464a-82dd-fe5d39e45ad9"),
                            Email = "filipj@gmail.com",
                            FirstName = "Filip",
                            LastName = "Jovanovic",
                            Password = "password1",
                            Phone = "062 3856 142",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("af19ba81-1376-4a55-b2f3-a0cb6782f491"),
                            Email = "lukap@gmail.com",
                            FirstName = "Luka",
                            LastName = "Petrovic",
                            Password = "password2",
                            Phone = "065 9934 376",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("998902da-c58d-4963-ae0d-39079971e5cd"),
                            Email = "bojanaa@gmail.com",
                            FirstName = "Bojana",
                            LastName = "Aleksijevic",
                            Password = "password3",
                            Phone = "060 9603 672",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("b0f6f6f3-9077-4186-a22e-8f9df4198d71"),
                            Email = "andrijanam@gmail.com",
                            FirstName = "Andrijana",
                            LastName = "Mihailovic",
                            Password = "password4",
                            Phone = "060 9603 672",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("c8d54e95-6d30-4667-b07e-cd30c4160d59"),
                            Email = "aleksandardj@gmail.com",
                            FirstName = "Aleksandar",
                            LastName = "Djordjevic",
                            Password = "password5",
                            Phone = "060 4622 672",
                            Role = 1
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Enrollment", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany("MyProperty")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCourses.API.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Forum", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany("Forums")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Lesson", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Post", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Course", b =>
                {
                    b.Navigation("Forums");

                    b.Navigation("Lessons");

                    b.Navigation("MyProperty");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Forum", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.User", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
