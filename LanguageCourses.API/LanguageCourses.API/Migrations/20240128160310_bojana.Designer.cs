// <auto-generated />
using System;
using LanguageCourses.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LanguageCourses.API.Migrations
{
    [DbContext(typeof(LanguageCoursesDbContext))]
    [Migration("20240128160310_bojana")]
    partial class bojana
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LanguageCourses.API.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            Available = true,
                            Description = "Description for Course 1",
                            Duration = 0,
                            Language = "Engleski",
                            Level = "B1",
                            Name = "Course 1",
                            Price = 0,
                            ProfessorId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8"),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            Available = true,
                            Description = "Description for Course 2",
                            Duration = 0,
                            Language = "Engleski",
                            Level = "C1",
                            Name = "Course 2",
                            Price = 0,
                            ProfessorId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8"),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            Available = true,
                            Description = "Description for Course 3",
                            Duration = 0,
                            Language = "Engleski",
                            Level = "B2",
                            Name = "Course 3",
                            Price = 0,
                            ProfessorId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed"),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            Available = true,
                            Description = "Description for Course 4",
                            Duration = 0,
                            Language = "Engleski",
                            Level = "C2",
                            Name = "Course 4",
                            Price = 0,
                            ProfessorId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed"),
                            Type = 0
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.CourseUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("961fa56e-71a8-4186-8a8d-488143d6a260"),
                            Content = "Content 1",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            Title = "Title 1"
                        },
                        new
                        {
                            Id = new Guid("e0c98ea1-2644-4ff0-8f2e-e7d30a3f2a6b"),
                            Content = "Content 2",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            Title = "Title 2"
                        },
                        new
                        {
                            Id = new Guid("b2d89a70-2ac5-4d26-94b9-ef99b746a388"),
                            Content = "Content 3",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            Title = "Title 3"
                        },
                        new
                        {
                            Id = new Guid("ed0632a3-1b00-421c-be7f-044253c2d820"),
                            Content = "Content 4",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            Title = "Title 4"
                        },
                        new
                        {
                            Id = new Guid("e19c5e3e-c5aa-411d-b540-0597307daf79"),
                            Content = "Content 5",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            Title = "Title 5"
                        },
                        new
                        {
                            Id = new Guid("1695a6e9-f4a8-45f2-8cc9-5ff0c01dad26"),
                            Content = "Content 6",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            Title = "Title 6"
                        },
                        new
                        {
                            Id = new Guid("75f0edab-103a-46ac-aff0-1f17aca2d279"),
                            Content = "Content 7",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            Title = "Title 7"
                        },
                        new
                        {
                            Id = new Guid("c1c2c043-1385-47d0-9ec8-c8a6085bf0bc"),
                            Content = "Content 8",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            Title = "Title 8"
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4b12efb-c878-4a43-9197-1efdf1d33e4a"),
                            Content = "Content 1",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            PostDate = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(9355),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("4abf8e23-8fbd-46a6-80dc-fedd31814e24"),
                            Content = "Content 2",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            PostDate = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(9377),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("5e6fdd45-3ba6-4019-af72-665d2e1a39aa"),
                            Content = "Content 3",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            PostDate = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(9381),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("87c1eb43-6bc9-4f0d-ab08-bf54a708c88c"),
                            Content = "Content 4",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            PostDate = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(9385),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("5f632e40-9f96-4c75-9afa-59dc6460d8e0"),
                            Content = "Content 5",
                            CourseId = new Guid("7fca3cd1-6d04-4ac1-bff6-57cb3a23e34a"),
                            PostDate = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(9388),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("d2d5b555-e8af-478b-a144-0ea40f7d4ed6"),
                            Content = "Content 6",
                            CourseId = new Guid("053504c1-bfad-4ec1-9932-1e7b5e536ce8"),
                            PostDate = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(9392),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        },
                        new
                        {
                            Id = new Guid("4bc9fece-54dc-4cca-a31b-de8a0557f8da"),
                            Content = "Content 7",
                            CourseId = new Guid("d1b4704a-5a5a-4b51-ab72-68b5db496d96"),
                            PostDate = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(9395),
                            Rating = 5,
                            UserId = new Guid("9150584f-eb77-4a84-a13f-698a581985d8")
                        },
                        new
                        {
                            Id = new Guid("e8a67c2e-3943-44ed-9d6c-7a56565302e9"),
                            Content = "Content 8",
                            CourseId = new Guid("c8b98b9e-a370-4c71-b899-ad558f4124b8"),
                            PostDate = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(9399),
                            Rating = 5,
                            UserId = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed")
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9150584f-eb77-4a84-a13f-698a581985d8"),
                            Email = "fjovanovic284@gmail.com",
                            FirstName = "Filip",
                            LastName = "Jovanović",
                            PasswordHash = new byte[] { 15, 72, 173, 19, 229, 62, 54, 60, 43, 15, 95, 167, 76, 99, 23, 106, 221, 29, 141, 144, 40, 124, 200, 218, 19, 181, 136, 188, 65, 147, 29, 114, 88, 135, 147, 249, 3, 70, 145, 118, 217, 204, 167, 33, 11, 149, 246, 249, 123, 199, 115, 107, 59, 178, 189, 105, 196, 12, 166, 155, 25, 195, 46, 191 },
                            PasswordSalt = new byte[] { 15, 31, 7, 13, 53, 32, 251, 4, 103, 176, 92, 173, 67, 232, 122, 161, 78, 67, 57, 65, 170, 20, 168, 132, 57, 58, 22, 154, 197, 39, 194, 195, 196, 149, 102, 25, 19, 72, 237, 206, 54, 199, 202, 183, 138, 233, 213, 229, 143, 7, 129, 188, 75, 247, 49, 60, 241, 136, 110, 200, 54, 38, 159, 151, 82, 47, 116, 121, 95, 54, 51, 143, 21, 75, 30, 20, 126, 120, 136, 40, 164, 13, 130, 222, 116, 181, 12, 193, 229, 142, 63, 4, 69, 76, 133, 126, 24, 35, 213, 251, 82, 72, 192, 201, 21, 79, 11, 112, 157, 169, 167, 193, 230, 169, 176, 249, 220, 141, 99, 79, 125, 12, 94, 1, 44, 84, 10, 192 },
                            Phone = "061 755 8995",
                            Role = 2,
                            VerificationToken = "A29DBA7903F9F358E1B917A254D1C0AD367651BC3C3609E0C32EC7E6FBFB48C2CC32ED0406CE210569490EE930F675DDEB7C234BCC9DFADCBF51C7BFA3AF0E7C",
                            VerifiedAt = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(113)
                        },
                        new
                        {
                            Id = new Guid("4f96f59a-a880-4f17-955a-c7d94f36f6ed"),
                            Email = "lule19@gmail.com",
                            FirstName = "Luka",
                            LastName = "Petrović",
                            PasswordHash = new byte[] { 15, 72, 173, 19, 229, 62, 54, 60, 43, 15, 95, 167, 76, 99, 23, 106, 221, 29, 141, 144, 40, 124, 200, 218, 19, 181, 136, 188, 65, 147, 29, 114, 88, 135, 147, 249, 3, 70, 145, 118, 217, 204, 167, 33, 11, 149, 246, 249, 123, 199, 115, 107, 59, 178, 189, 105, 196, 12, 166, 155, 25, 195, 46, 191 },
                            PasswordSalt = new byte[] { 15, 31, 7, 13, 53, 32, 251, 4, 103, 176, 92, 173, 67, 232, 122, 161, 78, 67, 57, 65, 170, 20, 168, 132, 57, 58, 22, 154, 197, 39, 194, 195, 196, 149, 102, 25, 19, 72, 237, 206, 54, 199, 202, 183, 138, 233, 213, 229, 143, 7, 129, 188, 75, 247, 49, 60, 241, 136, 110, 200, 54, 38, 159, 151, 82, 47, 116, 121, 95, 54, 51, 143, 21, 75, 30, 20, 126, 120, 136, 40, 164, 13, 130, 222, 116, 181, 12, 193, 229, 142, 63, 4, 69, 76, 133, 126, 24, 35, 213, 251, 82, 72, 192, 201, 21, 79, 11, 112, 157, 169, 167, 193, 230, 169, 176, 249, 220, 141, 99, 79, 125, 12, 94, 1, 44, 84, 10, 192 },
                            Phone = "064 765 9876",
                            Role = 2,
                            VerificationToken = "330277E981F544B4CF252C70AC73BACC92ECD9FA8A2CBA6280B7D636882E60926410110209AB0947FFFBE47440DC73743D61C80A8CC84D32355D4FF4D995499C",
                            VerifiedAt = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(213)
                        },
                        new
                        {
                            Id = new Guid("73fb19cd-7b56-459e-8b84-be0d05dd67b6"),
                            Email = "boka0404002.ba@gmail.com",
                            FirstName = "Bojana",
                            LastName = "Aleksijević",
                            PasswordHash = new byte[] { 15, 72, 173, 19, 229, 62, 54, 60, 43, 15, 95, 167, 76, 99, 23, 106, 221, 29, 141, 144, 40, 124, 200, 218, 19, 181, 136, 188, 65, 147, 29, 114, 88, 135, 147, 249, 3, 70, 145, 118, 217, 204, 167, 33, 11, 149, 246, 249, 123, 199, 115, 107, 59, 178, 189, 105, 196, 12, 166, 155, 25, 195, 46, 191 },
                            PasswordSalt = new byte[] { 15, 31, 7, 13, 53, 32, 251, 4, 103, 176, 92, 173, 67, 232, 122, 161, 78, 67, 57, 65, 170, 20, 168, 132, 57, 58, 22, 154, 197, 39, 194, 195, 196, 149, 102, 25, 19, 72, 237, 206, 54, 199, 202, 183, 138, 233, 213, 229, 143, 7, 129, 188, 75, 247, 49, 60, 241, 136, 110, 200, 54, 38, 159, 151, 82, 47, 116, 121, 95, 54, 51, 143, 21, 75, 30, 20, 126, 120, 136, 40, 164, 13, 130, 222, 116, 181, 12, 193, 229, 142, 63, 4, 69, 76, 133, 126, 24, 35, 213, 251, 82, 72, 192, 201, 21, 79, 11, 112, 157, 169, 167, 193, 230, 169, 176, 249, 220, 141, 99, 79, 125, 12, 94, 1, 44, 84, 10, 192 },
                            Phone = "064 784 5668",
                            Role = 2,
                            VerificationToken = "0138C7F7AB5D5E248B35267EFE83B0D81335FC74A44DD87BA39E64F2F9C413D3233EDC4C55AB2EB59828691FB19BA41553CAAE5573740C86601B2AE30E07A2A0",
                            VerifiedAt = new DateTime(2024, 1, 28, 17, 3, 10, 758, DateTimeKind.Local).AddTicks(242)
                        });
                });

            modelBuilder.Entity("LanguageCourses.API.Models.CourseUser", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany("CourseUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCourses.API.Models.User", "User")
                        .WithMany("CourseUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Lesson", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Review", b =>
                {
                    b.HasOne("LanguageCourses.API.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCourses.API.Models.Course", null)
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId1");

                    b.HasOne("LanguageCourses.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.Course", b =>
                {
                    b.Navigation("CourseUsers");

                    b.Navigation("Lessons");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LanguageCourses.API.Models.User", b =>
                {
                    b.Navigation("CourseUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
